package handlers

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

var (
	ActiveDialogs  = make(map[int]ActiveDialog)
	NextDialogID   int64
	ManagerDialogs = make(map[int64]int) // Track which manager is in which dialog
)

type ActiveDialog struct {
	ManagerChatID int64
	LastActivity  int64
	DialogID      int64
	ManuallyEnded bool
}

func HandleMessages(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	if dialog, isInDialogue := ActiveDialogs[int(userID)]; isInDialogue {
		msg := tgbotapi.NewMessage(dialog.ManagerChatID, update.Message.Text)
		bot.Send(msg)

		ActiveDialogs[int(userID)] = ActiveDialog{
			ManagerChatID: dialog.ManagerChatID,
			LastActivity:  time.Now().Unix(),
			DialogID:      dialog.DialogID,
			ManuallyEnded: dialog.ManuallyEnded,
		}
	} else if userID, isInDialogue := findUserByManagerChatID(chatID); isInDialogue {
		msg := tgbotapi.NewMessage(int64(userID), update.Message.Text)
		bot.Send(msg)

		ActiveDialogs[userID] = ActiveDialog{
			ManagerChatID: chatID,
			LastActivity:  time.Now().Unix(),
			DialogID:      dialog.DialogID,
			ManuallyEnded: dialog.ManuallyEnded,
		}
	}
}

func HandleManagerRequest(bot *tgbotapi.BotAPI, update tgbotapi.Update, chatID int64, userID int) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	botLink := os.Getenv("BOT_LINK")
	managerGroupChatID, err := strconv.ParseInt(os.Getenv("MANAGER_CHAT"), 10, 64)
	if err != nil {
		log.Fatal("Error parsing MANAGER_CHAT environment variable:", err)
	}

	if isUserInDialogue(userID) {
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
		bot.Send(msg)
		return
	}

	if _, inDialog := ManagerDialogs[chatID]; inDialog {
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.")
		bot.Send(msg)
		return
	}

	dialogID := GenerateNextDialogID()

	ActiveDialogs[userID] = ActiveDialog{
		ManagerChatID: 0,
		LastActivity:  time.Now().Unix(),
		DialogID:      dialogID,
		ManuallyEnded: false,
	}

	dialogLink := fmt.Sprintf("%s?start=dialog_%d_%d", botLink, userID, dialogID)

	notificationMsg := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞: %s", update.CallbackQuery.From.UserName, dialogLink)
	msg := tgbotapi.NewMessage(managerGroupChatID, notificationMsg)
	bot.Send(msg)

	userMsg := tgbotapi.NewMessage(chatID, "–ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ —Å–ø–µ—à–∏—Ç –≤ —á–∞—Ç. –°–∫–æ—Ä–æ –í–∞—Å –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–µ—à—ë–Ωüëåüèª ")
	bot.Send(userMsg)
}

func StartDialog(bot *tgbotapi.BotAPI, managerChatID int64, userID int) {
	if dialog, exists := ActiveDialogs[userID]; exists {
		if dialog.ManagerChatID != 0 && time.Now().Unix() < dialog.LastActivity+1800 { // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
			msg := tgbotapi.NewMessage(managerChatID, "–î—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –æ–±—â–∞–µ—Ç—Å—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
			bot.Send(msg)
			return
		}
		delete(ActiveDialogs, userID)
	}

	if _, inDialog := ManagerDialogs[managerChatID]; inDialog {
		msg := tgbotapi.NewMessage(managerChatID, "–í—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.")
		bot.Send(msg)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
	dialogID := GenerateNextDialogID()
	ActiveDialogs[userID] = ActiveDialog{
		ManagerChatID: managerChatID,
		LastActivity:  time.Now().Unix(),
		DialogID:      dialogID,
		ManuallyEnded: false,
	}

	ManagerDialogs[managerChatID] = userID

	msg := tgbotapi.NewMessage(managerChatID, fmt.Sprintf("–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.", userID))
	bot.Send(msg)

	userMsg := tgbotapi.NewMessage(int64(userID), "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.")
	bot.Send(userMsg)

	managerEndDialogButton := tgbotapi.NewInlineKeyboardButtonData("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "end_dialog")
	userEndDialogButton := tgbotapi.NewInlineKeyboardButtonData("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "end_dialog")

	managerKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(managerEndDialogButton),
	)
	userKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(userEndDialogButton),
	)

	managerMessage := tgbotapi.NewMessage(managerChatID, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.")
	managerMessage.ReplyMarkup = managerKeyboard
	bot.Send(managerMessage)

	userMessage := tgbotapi.NewMessage(int64(userID), "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.")
	userMessage.ReplyMarkup = userKeyboard
	bot.Send(userMessage)
}

func HandleEndButton(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.CallbackQuery.Message.Chat.ID

	if userID, isManager := findUserByManagerChatID(chatID); isManager {
		endDialog(bot, userID, true)
	} else {
		if _, exists := ActiveDialogs[int(chatID)]; exists {
			endDialog(bot, int(chatID), true)
		}
	}
}

func isUserInDialogue(userID int) bool {
	_, exists := ActiveDialogs[userID]
	return exists
}

func endDialog(bot *tgbotapi.BotAPI, userID int, manuallyEnded bool) {
	if dialog, exists := ActiveDialogs[userID]; exists {
		delete(ActiveDialogs, userID)

		if dialog.ManagerChatID != 0 {
			managerMsg := tgbotapi.NewMessage(dialog.ManagerChatID, "–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
			bot.Send(managerMsg)
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –≤—Ä—É—á–Ω—É—é
		if manuallyEnded {
			userMsg := tgbotapi.NewMessage(int64(userID), "–î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
			bot.Send(userMsg)
		}

		delete(ManagerDialogs, dialog.ManagerChatID)
	}
}

func MonitorDialogs(bot *tgbotapi.BotAPI) {
	for {
		time.Sleep(30 * time.Minute)

		currentTime := time.Now().Unix()
		for userID, dialog := range ActiveDialogs {
			if currentTime-dialog.LastActivity > 1800 {
				endDialog(bot, userID, false)
			}
		}
	}
}

func HandleEndCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	userID, err := strconv.Atoi(update.Message.CommandArguments())
	if err == nil {
		endDialog(bot, userID, true)
	}
}

func findUserByManagerChatID(managerChatID int64) (int, bool) {
	for userID, chatID := range ActiveDialogs {
		if chatID.ManagerChatID == managerChatID {
			return userID, true
		}
	}
	return 0, false
}

func GenerateNextDialogID() int64 {
	NextDialogID++
	return NextDialogID
}
